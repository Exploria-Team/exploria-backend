generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement()) @map("id")
  name              String     @map("name")
  email             String     @unique @map("email")
  password          String     @map("password")

  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @default(now()) @map("updated_at")

  profilePictureUrl String?    @map("profile_picture_url")
  age               Int?       @map("age")
  preferences       Preference[] 
  plans             Plan[]    

  favorites         Favorite[]
  reviews           Review[]

  @@map("users")
}

model Favorite {
  id              Int          @id @default(autoincrement()) @map("id")
  destinationId   Int          @map("destination_id")
  userId          Int          @map("user_id")
  date            DateTime     @default(now()) @map("date")

  user            User         @relation(fields: [userId], references: [id])
  destination     Destination  @relation(fields: [destinationId], references: [id])

  @@unique([userId, destinationId])
  @@map("favorites")
}

model Destination {
  id                    Int               @id @default(autoincrement()) @map("id")
  name                  String            @map("name")
  description           String            @map("description")
  averageRating         Float             @map("average_rating")
  lat                   Float             @map("lat")
  lon                   Float             @map("lon")
  entryFee              Int?              @map("price")
  visitDurationMinutes  Int?              @map("time_minutes")
  favorites             Favorite[]        
  reviews               Review[]          
  city                  City              @relation(fields: [cityId], references: [id])
  cityId                Int               @map("city_id")
  planDestinations      PlanDestination[]
  categories            DestinationCategory[]
  photos                DestinationPhoto[] 

  @@map("destinations")
}

model DestinationPhoto {
  id              Int     @id @default(autoincrement()) @map("id")
  destinationId   Int     @map("destination_id")
  photoUrl        String  @map("photo_url")
  destination     Destination @relation(fields: [destinationId], references: [id])

  @@map("destination_photos")
}

model DestinationCategory {
  id              Int       @id @default(autoincrement()) @map("id")
  destinationId   Int       @map("destination_id")
  categoryId      Int       @map("category_id")
  
  destination     Destination @relation(fields: [destinationId], references: [id])
  category        Category    @relation(fields: [categoryId], references: [id])

  @@unique([destinationId, categoryId])
  @@map("destination_categories")
}

model Review {
  id              String     @id @default(uuid()) @map("id")
  userId          Int        @map("user_id")
  destinationId   Int        @map("destination_id")
  reviewText      String     @map("review_text")
  rating          Int        @map("rating")
  reviewDate      DateTime?   @map("review_date")
  reviewPhotoUrl  String?    @map("review_photo_url")

  user            User       @relation(fields: [userId], references: [id])
  destination     Destination @relation(fields: [destinationId], references: [id])

  @@map("reviews")
}

model Category {
  id          Int          @id @default(autoincrement()) @map("id")
  name        String       @unique @map("name")
  group       String       @map("group")
  preferences Preference[] 
  destinations DestinationCategory[]
  tourGuides  TourGuide[]

  @@map("categories")
}

model Preference {
  id          String   @id @default(uuid()) @map("id")
  categoryId  Int      @map("category_id")
  userId      Int      @map("user_id")

  category    Category    @relation(fields: [categoryId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@unique([categoryId, userId])
  @@map("preferences")
}

model City {
  id           Int           @id @default(autoincrement()) @map("id")
  name         String        @map("name")
  tourGuides   TourGuide[]   
  destinations Destination[] 

  @@map("cities")
}

model TourGuide {
  id                String  @id @default(uuid()) @map("id")
  name              String  @map("name")
  waNumber          String  @map("wa_number")
  cityId            Int     @map("city_id")
  categoryId        Int     @map("category_id")
  price             Int     @map("price")
  email             String  @unique @map("email")
  gender            String  @map("gender")
  verified          Boolean @map("verified")
  bio               String  @map("bio")
  photoUrl          String? @map("photo_url")
  city              City          @relation(fields: [cityId], references: [id])
  category          Category      @relation(fields: [categoryId], references: [id])


  @@map("tour_guides")
}

model Plan {
  id        String  @id @default(uuid()) @map("id")
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  planDestinations PlanDestination[]

  @@map("plans")
}

model PlanDestination {
  id             String     @id @default(uuid()) @map("id")
  planId         String     @map("plan_id")
  destinationId  Int        @map("destination_id")
  date           DateTime   @map("date")

  plan           Plan       @relation(fields: [planId], references: [id])
  destination    Destination @relation(fields: [destinationId], references: [id])

  @@map("plan_destinations")
}
